#! /usr/bin/env python
import cv2
import rospy
import numpy as np

#*************************************************************************************************************
#*************************************************************************************************************
#*************************************************************************************************************
#  		               TIP
def tip(imagenN):
	H=np.array([[-5.08706984e-01,-1.66745619,2.45875702e+02],[-2.31164908e-01,-5.65409815,6.20729515e+02],[-6.89991249e-04,-1.66269340e-02,1.0]])
	imagenH = cv2.warpPerspective(imagenN, H, (200,300),borderMode=cv2.BORDER_CONSTANT, borderValue=(0, 0, 0))
	return imagenH
#*************************************************************************************************************
#*************************************************************************************************************
#*************************************************************************************************************
def roi_zone(x):
	assert (x>=0) and (x<=199), 'x out of limits'
	if (x>119) and (x<=199):
		y = int(round(-2.0625*x+544.4375))
	if (x>=79) and (x<=119):
		y = 299
	if (x>=0) and (x<79):
		y = int(round(1.9241*x+147))
	return y
#*************************************************************************************************************
#*************************************************************************************************************
#*************************************************************************************************************
def vec_create(x,stride,side):
	if(side==1):
		xi = x+stride
		xd = x-stride
	else:
		xi = x-stride
		xd = x+stride
	if(xi<0): xi = 0
	if(xi>199): xi = 299
	if(xd<0): xi = 0
	if(xd>199): xi = 299
	xv = np.arange(xi,xd,(-1)*side)
	return xv
#*************************************************************************************************************
#*************************************************************************************************************
#*************************************************************************************************************
def line_detector(imagen0,x1,l,side):
	K = True
	stridex = 12
	stridey = 12
	y1 = roi_zone(x1)
	x1v = vec_create(x1,stridex,side)
	while (K==True):
		m = y1+stridey
		if (m>=299): m = 299
		for j in range(m,y1-stridey,-1):
			for i in x1v:
				if imagen0[j][i]==255:
					x1 = i
					y1 = j
					K = False
					break
			x1v = vec_create(x1,stridex,side)
			if (K==False): break
		if (K==True):
			x1 = x1-1*side
			y1 = roi_zone(x1)
	x2 = x1
	x2v = vec_create(x2,stridex,side)
	for j in range(y1-1,y1-l,-1):
		for i in x2v:
			if imagen0[j][i]==255:
				x2 = i
				y2 = j
				K = False
				break
		x2v = vec_create(x2,stridex,side)
	return x1,y1,x2,y2
