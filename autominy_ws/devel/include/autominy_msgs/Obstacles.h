// Generated by gencpp from file autominy_msgs/Obstacles.msg
// DO NOT EDIT!


#ifndef AUTOMINY_MSGS_MESSAGE_OBSTACLES_H
#define AUTOMINY_MSGS_MESSAGE_OBSTACLES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <autominy_msgs/Obstacle.h>

namespace autominy_msgs
{
template <class ContainerAllocator>
struct Obstacles_
{
  typedef Obstacles_<ContainerAllocator> Type;

  Obstacles_()
    : header()
    , obstacles()  {
    }
  Obstacles_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , obstacles(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::autominy_msgs::Obstacle_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::autominy_msgs::Obstacle_<ContainerAllocator> >> _obstacles_type;
  _obstacles_type obstacles;





  typedef boost::shared_ptr< ::autominy_msgs::Obstacles_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::autominy_msgs::Obstacles_<ContainerAllocator> const> ConstPtr;

}; // struct Obstacles_

typedef ::autominy_msgs::Obstacles_<std::allocator<void> > Obstacles;

typedef boost::shared_ptr< ::autominy_msgs::Obstacles > ObstaclesPtr;
typedef boost::shared_ptr< ::autominy_msgs::Obstacles const> ObstaclesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::autominy_msgs::Obstacles_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::autominy_msgs::Obstacles_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::autominy_msgs::Obstacles_<ContainerAllocator1> & lhs, const ::autominy_msgs::Obstacles_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.obstacles == rhs.obstacles;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::autominy_msgs::Obstacles_<ContainerAllocator1> & lhs, const ::autominy_msgs::Obstacles_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace autominy_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::autominy_msgs::Obstacles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::autominy_msgs::Obstacles_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autominy_msgs::Obstacles_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::autominy_msgs::Obstacles_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autominy_msgs::Obstacles_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::autominy_msgs::Obstacles_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::autominy_msgs::Obstacles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bd5a4bc101d0799505ddfd03792ae7c5";
  }

  static const char* value(const ::autominy_msgs::Obstacles_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbd5a4bc101d07995ULL;
  static const uint64_t static_value2 = 0x05ddfd03792ae7c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::autominy_msgs::Obstacles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "autominy_msgs/Obstacles";
  }

  static const char* value(const ::autominy_msgs::Obstacles_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::autominy_msgs::Obstacles_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"Obstacle[] obstacles\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: autominy_msgs/Obstacle\n"
"# Detected or simulated object\n"
"################################################################################\n"
"\n"
"# Header\n"
"# header.frame_id defines reference frame\n"
"Header header\n"
"\n"
"# Object frame (analogous to child_frame_id in nav_msgs/Odometry)\n"
"string object_frame_id\n"
"\n"
"\n"
"# ID for tracking\n"
"uint16 object_id\n"
"\n"
"# duration this object has been tracked for\n"
"duration age\n"
"\n"
"# duration since last update/confirmation by measurement\n"
"# (set to 0 as soon as a measurement update is available)\n"
"duration prediction_age\n"
"\n"
"\n"
"# odometry of the object (position, orientation, linear and angular velocities)\n"
"# odom.header.frame_id is header.frame_id\n"
"# child_frame_id is object_frame_id\n"
"nav_msgs/Odometry odom\n"
"\n"
"# maximal size of the object (x,y,z) or (depth, width, height) [m]\n"
"# relative to the object frame, i.e. the orientation of the object is taken into account\n"
"geometry_msgs/Vector3 size\n"
"\n"
"\n"
"# The contour points of the object [m]\n"
"geometry_msgs/Point[] contour_points\n"
"\n"
"\n"
"# definition of most likely class of this object:\n"
"#   0: unclassified\n"
"#   1: unknown small\n"
"#   2: unknown big\n"
"#   3: pedestrian\n"
"#   4: bike\n"
"#   5: car\n"
"#   6: truck\n"
"uint16 UNCLASSIFIED    = 0\n"
"uint16 UNKNOWN_SMALL   = 1\n"
"uint16 UNKNOWN_BIG     = 2\n"
"uint16 PEDESTRIAN      = 3\n"
"uint16 BIKE            = 4\n"
"uint16 CAR             = 5\n"
"uint16 TRUCK           = 6\n"
"\n"
"# most likely class of this object\n"
"uint16 classification\n"
"\n"
"# duration this object has been classified as current class\n"
"duration classification_age\n"
"\n"
"# The higher this value the more reliable the assigned object class [0,1]\n"
"float64 classification_certainty\n"
"\n"
"\n"
"================================================================================\n"
"MSG: nav_msgs/Odometry\n"
"# This represents an estimate of a position and velocity in free space.  \n"
"# The pose in this message should be specified in the coordinate frame given by header.frame_id.\n"
"# The twist in this message should be specified in the coordinate frame given by the child_frame_id\n"
"Header header\n"
"string child_frame_id\n"
"geometry_msgs/PoseWithCovariance pose\n"
"geometry_msgs/TwistWithCovariance twist\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/TwistWithCovariance\n"
"# This expresses velocity in free space with uncertainty.\n"
"\n"
"Twist twist\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::autominy_msgs::Obstacles_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::autominy_msgs::Obstacles_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.obstacles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Obstacles_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::autominy_msgs::Obstacles_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::autominy_msgs::Obstacles_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "obstacles[]" << std::endl;
    for (size_t i = 0; i < v.obstacles.size(); ++i)
    {
      s << indent << "  obstacles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::autominy_msgs::Obstacle_<ContainerAllocator> >::stream(s, indent + "    ", v.obstacles[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTOMINY_MSGS_MESSAGE_OBSTACLES_H
