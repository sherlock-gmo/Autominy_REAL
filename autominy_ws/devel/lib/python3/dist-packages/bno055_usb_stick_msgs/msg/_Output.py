# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from bno055_usb_stick_msgs/Output.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import bno055_usb_stick_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class Output(genpy.Message):
  _md5sum = "1189549f30b7c0d425e89b36006afea6"
  _type = "bno055_usb_stick_msgs/Output"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
geometry_msgs/Vector3 acceleration
geometry_msgs/Vector3 magnetometer
geometry_msgs/Vector3 gyroscope
bno055_usb_stick_msgs/EulerAngles euler_angles
geometry_msgs/Quaternion quaternion
geometry_msgs/Vector3 linear_acceleration
geometry_msgs/Vector3 gravity_vector
float64 temperature
bno055_usb_stick_msgs/CalibrationStatus calibration_status
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: bno055_usb_stick_msgs/EulerAngles
float64 heading
float64 roll
float64 pitch
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: bno055_usb_stick_msgs/CalibrationStatus
# 3 indicates fully calibrated; 0 indicates not calibrated

uint16 system
uint16 gyroscope
uint16 accelerometer
uint16 magnetometer"""
  __slots__ = ['header','acceleration','magnetometer','gyroscope','euler_angles','quaternion','linear_acceleration','gravity_vector','temperature','calibration_status']
  _slot_types = ['std_msgs/Header','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','bno055_usb_stick_msgs/EulerAngles','geometry_msgs/Quaternion','geometry_msgs/Vector3','geometry_msgs/Vector3','float64','bno055_usb_stick_msgs/CalibrationStatus']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,acceleration,magnetometer,gyroscope,euler_angles,quaternion,linear_acceleration,gravity_vector,temperature,calibration_status

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Output, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Vector3()
      if self.magnetometer is None:
        self.magnetometer = geometry_msgs.msg.Vector3()
      if self.gyroscope is None:
        self.gyroscope = geometry_msgs.msg.Vector3()
      if self.euler_angles is None:
        self.euler_angles = bno055_usb_stick_msgs.msg.EulerAngles()
      if self.quaternion is None:
        self.quaternion = geometry_msgs.msg.Quaternion()
      if self.linear_acceleration is None:
        self.linear_acceleration = geometry_msgs.msg.Vector3()
      if self.gravity_vector is None:
        self.gravity_vector = geometry_msgs.msg.Vector3()
      if self.temperature is None:
        self.temperature = 0.
      if self.calibration_status is None:
        self.calibration_status = bno055_usb_stick_msgs.msg.CalibrationStatus()
    else:
      self.header = std_msgs.msg.Header()
      self.acceleration = geometry_msgs.msg.Vector3()
      self.magnetometer = geometry_msgs.msg.Vector3()
      self.gyroscope = geometry_msgs.msg.Vector3()
      self.euler_angles = bno055_usb_stick_msgs.msg.EulerAngles()
      self.quaternion = geometry_msgs.msg.Quaternion()
      self.linear_acceleration = geometry_msgs.msg.Vector3()
      self.gravity_vector = geometry_msgs.msg.Vector3()
      self.temperature = 0.
      self.calibration_status = bno055_usb_stick_msgs.msg.CalibrationStatus()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_23d4H().pack(_x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.magnetometer.x, _x.magnetometer.y, _x.magnetometer.z, _x.gyroscope.x, _x.gyroscope.y, _x.gyroscope.z, _x.euler_angles.heading, _x.euler_angles.roll, _x.euler_angles.pitch, _x.quaternion.x, _x.quaternion.y, _x.quaternion.z, _x.quaternion.w, _x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z, _x.gravity_vector.x, _x.gravity_vector.y, _x.gravity_vector.z, _x.temperature, _x.calibration_status.system, _x.calibration_status.gyroscope, _x.calibration_status.accelerometer, _x.calibration_status.magnetometer))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Vector3()
      if self.magnetometer is None:
        self.magnetometer = geometry_msgs.msg.Vector3()
      if self.gyroscope is None:
        self.gyroscope = geometry_msgs.msg.Vector3()
      if self.euler_angles is None:
        self.euler_angles = bno055_usb_stick_msgs.msg.EulerAngles()
      if self.quaternion is None:
        self.quaternion = geometry_msgs.msg.Quaternion()
      if self.linear_acceleration is None:
        self.linear_acceleration = geometry_msgs.msg.Vector3()
      if self.gravity_vector is None:
        self.gravity_vector = geometry_msgs.msg.Vector3()
      if self.calibration_status is None:
        self.calibration_status = bno055_usb_stick_msgs.msg.CalibrationStatus()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 192
      (_x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.magnetometer.x, _x.magnetometer.y, _x.magnetometer.z, _x.gyroscope.x, _x.gyroscope.y, _x.gyroscope.z, _x.euler_angles.heading, _x.euler_angles.roll, _x.euler_angles.pitch, _x.quaternion.x, _x.quaternion.y, _x.quaternion.z, _x.quaternion.w, _x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z, _x.gravity_vector.x, _x.gravity_vector.y, _x.gravity_vector.z, _x.temperature, _x.calibration_status.system, _x.calibration_status.gyroscope, _x.calibration_status.accelerometer, _x.calibration_status.magnetometer,) = _get_struct_23d4H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_23d4H().pack(_x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.magnetometer.x, _x.magnetometer.y, _x.magnetometer.z, _x.gyroscope.x, _x.gyroscope.y, _x.gyroscope.z, _x.euler_angles.heading, _x.euler_angles.roll, _x.euler_angles.pitch, _x.quaternion.x, _x.quaternion.y, _x.quaternion.z, _x.quaternion.w, _x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z, _x.gravity_vector.x, _x.gravity_vector.y, _x.gravity_vector.z, _x.temperature, _x.calibration_status.system, _x.calibration_status.gyroscope, _x.calibration_status.accelerometer, _x.calibration_status.magnetometer))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Vector3()
      if self.magnetometer is None:
        self.magnetometer = geometry_msgs.msg.Vector3()
      if self.gyroscope is None:
        self.gyroscope = geometry_msgs.msg.Vector3()
      if self.euler_angles is None:
        self.euler_angles = bno055_usb_stick_msgs.msg.EulerAngles()
      if self.quaternion is None:
        self.quaternion = geometry_msgs.msg.Quaternion()
      if self.linear_acceleration is None:
        self.linear_acceleration = geometry_msgs.msg.Vector3()
      if self.gravity_vector is None:
        self.gravity_vector = geometry_msgs.msg.Vector3()
      if self.calibration_status is None:
        self.calibration_status = bno055_usb_stick_msgs.msg.CalibrationStatus()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 192
      (_x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.magnetometer.x, _x.magnetometer.y, _x.magnetometer.z, _x.gyroscope.x, _x.gyroscope.y, _x.gyroscope.z, _x.euler_angles.heading, _x.euler_angles.roll, _x.euler_angles.pitch, _x.quaternion.x, _x.quaternion.y, _x.quaternion.z, _x.quaternion.w, _x.linear_acceleration.x, _x.linear_acceleration.y, _x.linear_acceleration.z, _x.gravity_vector.x, _x.gravity_vector.y, _x.gravity_vector.z, _x.temperature, _x.calibration_status.system, _x.calibration_status.gyroscope, _x.calibration_status.accelerometer, _x.calibration_status.magnetometer,) = _get_struct_23d4H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_23d4H = None
def _get_struct_23d4H():
    global _struct_23d4H
    if _struct_23d4H is None:
        _struct_23d4H = struct.Struct("<23d4H")
    return _struct_23d4H
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
